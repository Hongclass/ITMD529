ods html close;
data temp_bal;
set data.main_201209;
where ptype eq 'CCS' and stype in ("REW","NOR","SIG");
if segment eq . then segment = 7;
if cbr eq . then cbr = 99;
if market eq . then market = 99;
keep hhid segment cbr market band rm hh dda mms sav tda ira mtg heq iln ind card sln sec ins trs sdb dda_amt mms_amt sav_amt tda_amt ira_amt mtg_amt heq_amt iln_amt ind_amt ccs_amt sln_amt sec_amt trs_amt segment;
rename card=ccs;
run;
data temp_contrib;
set data.contrib_201209;
keep hhid DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con card_con ILN_CON SLN_CON ind_con;
rename card_con=ccs_con;
run;
data temp_merged;
merge temp_bal (in=a) temp_contrib (in=b);
by hhid;
if a ;
run;
proc tabulate data=temp_merged missing out=bal1;
class segment;
var hh dda mms sav tda ira mtg heq iln ind ccs sln sec ins trs sdb dda_amt mms_amt sav_amt tda_amt ira_amt mtg_amt heq_amt iln_amt ind_amt ccs_amt sln_amt sec_amt trs_amt DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con ccs_con
ILN_CON SLN_CON ind_con;
table (segment ALL) , (hh dda mms sav tda ira mtg heq iln ind ccs sln sec ins trs sdb)*(sum) (dda_amt mms_amt sav_amt tda_amt ira_amt mtg_amt heq_amt iln_amt ind_amt ccs_amt sln_amt sec_amt trs_amt)*(sum) (dda_amt mms_amt sav_amt tda_amt ira_amt mtg_amt
heq_amt iln_amt ind_amt ccs_amt sln_amt sec_amt trs_amt)*(mean) (DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con ccs_con ILN_CON SLN_CON ind_con)*sum (DDA_CON MMS_CON SAV_CON TDA_CON IRA_CON SEC_CON TRS_CON mtg_con heq_con ccs_con
ILN_CON SLN_CON ind_con)*mean;
run;
data bal2;
set bal1;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
run;
data bal3;
length product $ 25;
set bal2;
product = "hh";
prod_hh = hh_sum;
penetration = divide(hh_sum , hh_sum);
balance = .;
bal_prod_hh = .;
bal_tot_hh = .;
contribution = .;
con_prod_hh = .;
con_tot_hh = .;
output;
product = "dda";
prod_hh = dda_sum;
penetration = divide(dda_sum , hh_sum);
balance = dda_amt_sum;
bal_prod_hh = divide( dda_amt_sum ,dda_sum);
bal_tot_hh = dda_amt_mean;
contribution = dda_con_sum;
con_prod_hh = divide(dda_con_sum ,dda_sum);
con_tot_hh = dda_con_mean;
output;
product = "mms";
prod_hh = mms_sum;
penetration = divide(mms_sum , hh_sum);
balance = mms_amt_sum;
bal_prod_hh = divide( mms_amt_sum ,mms_sum);
bal_tot_hh = mms_amt_mean;
contribution = mms_con_sum;
con_prod_hh = divide(mms_con_sum ,mms_sum);
con_tot_hh = mms_con_mean;
output;
product = "sav";
prod_hh = sav_sum;
penetration = divide(sav_sum , hh_sum);
balance = sav_amt_sum;
bal_prod_hh = divide( sav_amt_sum ,sav_sum);
bal_tot_hh = sav_amt_mean;
contribution = sav_con_sum;
con_prod_hh = divide(sav_con_sum ,sav_sum);
con_tot_hh = sav_con_mean;
output;
product = "tda";
prod_hh = tda_sum;
penetration = divide(tda_sum , hh_sum);
balance = tda_amt_sum;
bal_prod_hh = divide( tda_amt_sum ,tda_sum);
bal_tot_hh = tda_amt_mean;
contribution = tda_con_sum;
con_prod_hh = divide(tda_con_sum ,tda_sum);
con_tot_hh = tda_con_mean;
output;
product = "ira";
prod_hh = ira_sum;
penetration = divide(ira_sum , hh_sum);
balance = ira_amt_sum;
bal_prod_hh = divide( ira_amt_sum ,ira_sum);
bal_tot_hh = ira_amt_mean;
contribution = ira_con_sum;
con_prod_hh = divide(ira_con_sum ,ira_sum);
con_tot_hh = ira_con_mean;
output;
product = "mtg";
prod_hh = mtg_sum;
penetration = divide(mtg_sum , hh_sum);
balance = mtg_amt_sum;
bal_prod_hh = divide( mtg_amt_sum ,mtg_sum);
bal_tot_hh = mtg_amt_mean;
contribution = mtg_con_sum;
con_prod_hh = divide(mtg_con_sum ,mtg_sum);
con_tot_hh = mtg_con_mean;
output;
product = "heq";
prod_hh = heq_sum;
penetration = divide(heq_sum , hh_sum);
balance = heq_amt_sum;
bal_prod_hh = divide( heq_amt_sum ,heq_sum);
bal_tot_hh = heq_amt_mean;
contribution = heq_con_sum;
con_prod_hh = divide(heq_con_sum ,heq_sum);
con_tot_hh = heq_con_mean;
output;
product = "iln";
prod_hh = iln_sum;
penetration = divide(iln_sum , hh_sum);
balance = iln_amt_sum;
bal_prod_hh = divide( iln_amt_sum ,iln_sum);
bal_tot_hh = iln_amt_mean;
contribution = iln_con_sum;
con_prod_hh = divide(iln_con_sum ,iln_sum);
con_tot_hh = iln_con_mean;
output;
product = "ind";
prod_hh = ind_sum;
penetration = divide(ind_sum , hh_sum);
balance = ind_amt_sum;
bal_prod_hh = divide( ind_amt_sum ,ind_sum);
bal_tot_hh = ind_amt_mean;
contribution = ind_con_sum;
con_prod_hh = divide(ind_con_sum ,ind_sum);
con_tot_hh = ind_con_mean;
output;
product = "ccs";
prod_hh = ccs_sum;
penetration = divide(ccs_sum , hh_sum);
balance = ccs_amt_sum;
bal_prod_hh = divide( ccs_amt_sum ,ccs_sum);
bal_tot_hh = ccs_amt_mean;
contribution = ccs_con_sum;
con_prod_hh = divide(ccs_con_sum ,ccs_sum);
con_tot_hh = ccs_con_mean;
output;
product = "sln";
prod_hh = sln_sum;
penetration = divide(sln_sum , hh_sum);
balance = sln_amt_sum;
bal_prod_hh = divide( sln_amt_sum ,sln_sum);
bal_tot_hh = sln_amt_mean;
contribution = sln_con_sum;
con_prod_hh = divide(sln_con_sum ,sln_sum);
con_tot_hh = sln_con_mean;
output;
product = "sec";
prod_hh = sec_sum;
penetration = divide(sec_sum , hh_sum);
balance = sec_amt_sum;
bal_prod_hh = divide( sec_amt_sum ,sec_sum);
bal_tot_hh = sec_amt_mean;
contribution = sec_con_sum;
con_prod_hh = divide(sec_con_sum ,sec_sum);
con_tot_hh = sec_con_mean;
output;
product = "ins";
prod_hh = ins_sum;
penetration = divide(ins_sum , hh_sum);
balance = 0;
bal_prod_hh = 0;
bal_tot_hh = 0;
contribution = 0;
con_prod_hh = 0;
con_tot_hh = 0;
output;
product = "trs";
prod_hh = trs_sum;
penetration = divide(trs_sum , hh_sum);
balance = trs_amt_sum;
bal_prod_hh = divide( trs_amt_sum ,trs_sum);
bal_tot_hh = trs_amt_mean;
contribution = trs_con_sum;
con_prod_hh = divide(trs_con_sum ,trs_sum);
con_tot_hh = trs_con_mean;
output;
product = "sdb";
prod_hh = sdb_sum;
penetration = divide(sdb_sum , hh_sum);
balance = 0;
bal_prod_hh = 0;
bal_tot_hh = 0;
contribution = 0;
con_prod_hh = 0;
con_tot_hh = 0;
output;
keep segment product prod_hh penetration balance bal_prod_hh bal_tot_hh contribution con_prod_hh con_tot_hh;
format penetration percent8.1;
run;
data temp_data;
set data.main_201209;
where ptype eq 'CCS' and stype in ("REW","NOR","SIG");
cqi = sum(of cqi:);
if segment eq . then segment = 7;
if cbr eq . then cbr = 99;
if market eq . then market = 99;
keep segment cbr market segment band tenure_yr rm svcs cqi: hh hhid;
run;
proc tabulate data=temp_data out=segment_results missing;
class segment ;
var hh;
table (segment ALL) , hh*sum*f=comma12. / nocellmerge;
format segment segfmt. segment segfmt. ;
run;
data segment_results;
set segment_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cbr_results missing;
class segment ;
class cbr;
var hh;
table (segment ALL) *(cbr ALL), hh*sum*f=comma12. / nocellmerge;
format cbr cbr2012fmt. segment segfmt. ;
run;
data cbr_results;
set cbr_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cbr = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=market_results missing;
class segment ;
class market;
var hh;
table (segment ALL) *(market ALL), hh*sum*f=comma12. / nocellmerge;
format market mkt2012fmt. segment segfmt. ;
run;
data market_results;
set market_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
market = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=band_results missing;
class segment ;
class band;
var hh;
table (segment ALL) *(band ALL), hh*sum*f=comma12. / nocellmerge;
format band $2. segment segfmt. ;
run;
data band_results;
set band_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
band = 'All';
end;
format segment segfmt.;
proc tabulate data=temp_data out=tenure_yr_results missing;
class segment ;
class tenure_yr;
var hh;
table (segment ALL) *(tenure_yr ALL), hh*sum*f=comma12. / nocellmerge;
format tenure_yr tenureband. segment segfmt. ;
run;
data tenure_yr_results;
set tenure_yr_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
tenure_yr = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=svcs_results missing;
class segment ;
class svcs;
var hh;
table (segment ALL) *(svcs ALL), hh*sum*f=comma12. / nocellmerge;
format svcs comma2. segment segfmt. ;
run;
data svcs_results;
set svcs_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
svcs = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_results missing;
class segment ;
class cqi;
var hh;
table (segment ALL) *(cqi ALL), hh*sum*f=comma12. / nocellmerge;
format cqi cqifmt. segment segfmt. ;
run;
data cqi_results;
set cqi_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_dd_results missing;
class segment ;
class cqi_dd;
var hh;
table (segment ALL) *(cqi_dd ALL), hh*sum*f=comma12. / nocellmerge;
format cqi_dd binary_flag. segment segfmt. ;
run;
data cqi_dd_results;
set cqi_dd_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi_dd = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_bp_results missing;
class segment ;
class cqi_bp;
var hh;
table (segment ALL) *(cqi_bp ALL), hh*sum*f=comma12. / nocellmerge;
format cqi_bp binary_flag. segment segfmt. ;
run;
data cqi_bp_results;
set cqi_bp_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi_bp = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_web_results missing;
class segment ;
class cqi_web;
var hh;
table (segment ALL) *(cqi_web ALL), hh*sum*f=comma12. / nocellmerge;
format cqi_web binary_flag. segment segfmt. ;
run;
data cqi_web_results;
set cqi_web_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi_web = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_deb_results missing;
class segment ;
class cqi_deb;
var hh;
table (segment ALL) *(cqi_deb ALL), hh*sum*f=comma12. / nocellmerge;
format cqi_deb binary_flag. segment segfmt. ;
run;
data cqi_deb_results;
set cqi_deb_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi_deb = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=cqi_odl_results missing;
class segment ;
class cqi_odl;
var hh;
table (segment ALL) *(cqi_odl ALL), hh*sum*f=comma12. / nocellmerge;
format cqi_odl binary_flag. segment segfmt. ;
run;
data cqi_odl_results;
set cqi_odl_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
cqi_odl = -1;
end;
format segment segfmt.;
proc tabulate data=temp_data out=rm_results missing;
class segment ;
class rm;
var hh;
table (segment ALL) *(rm ALL), hh*sum*f=comma12. / nocellmerge;
format rm $rmfmt. segment segfmt. ;
run;
data rm_results;
set rm_results;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
if substr(_type_,2,1) eq 0 then do;
rm = 'All';
end;
format segment segfmt.;
run;
*************************************************;
** ANALYSIS FOR TRANSACTIONS (WEB) **;
*************************************************;
data temp_web ;
set data.main_201209;
where ptype eq 'CCS' and stype in ("REW","NOR","SIG");
where also WEB = 1;
if web_signon ge 1 then web1 = 1;
else web1 = 0;
if bp_num ge 1 then bp1 = 1;
else bp1 = 0;
if sms_num ge 1 then sms1 = 1;
else sms1 = 0;
if wap_num ge 1 then wap1 = 1;
else wap1 = 0;
if fico_num ge 1 then fico1 = 1;
else fico1 = 0;
if fworks_num ge 1 then fworks1 = 1;
else fworks1 = 0;
edeliv1 = 0;
estat1 = 0;
edeliv_num = 0;
estat_num = 0;
keep segment HHID HH web bp WAP SMS edeliv estat fico FWorks web_signon BP_NUM BP_AMT SMS_NUM WAP_NUM fico_num fworks_num web1 bp1 sms1 wap1 fico1 fworks1 edeliv1 estat1 estat_num edeliv_num;
rename web_signon = web_num;
run;
Proc tabulate data=temp_web out=web1 missing;
class segment;
var HH web bp WAP SMS edeliv estat fico FWorks web_num BP_NUM BP_AMT SMS_NUM WAP_NUM fico_num fworks_num web1 bp1 sms1 wap1 fico1 fworks1 edeliv1 estat1 estat_num edeliv_num;
table (segment ALL), (sum)*(HH web bp WAP SMS edeliv estat fico FWorks web_num BP_NUM BP_AMT SMS_NUM WAP_NUM fico_num fworks_num web1 bp1 sms1 wap1 fico1 fworks1 edeliv1 estat1 estat_num edeliv_num) / nocellmerge;
run;
data web2;
set web1;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
run;
data web3;
length Service $ 25;
set web2;
Service = "web";
Enrolled = web_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(web_sum, hh_sum);
Active = web1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(web1_sum, enrolled);
volume_avg = 0;
if web1_sum ne 0 then volume_avg = divide(web_num_sum, web1_sum);
spend_avg = .;
output;
Service = "bp";
Enrolled = bp_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(bp_sum, hh_sum);
Active = bp1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(bp1_sum, enrolled);
volume_avg = 0;
if bp1_sum ne 0 then volume_avg = divide(bp_num_sum, bp1_sum);
spend_avg = .;
if bp_sum ne 0 then spend_avg = divide(bp_amt_sum, bp_sum);
output;
Service = "wap";
Enrolled = wap_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(wap_sum, hh_sum);
Active = wap1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(wap1_sum, enrolled);
volume_avg = 0;
if wap1_sum ne 0 then volume_avg = divide(wap_num_sum, wap1_sum);
spend_avg = .;
output;
Service = "sms";
Enrolled = sms_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(sms_sum, hh_sum);
Active = sms1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(sms1_sum, enrolled);
volume_avg = 0;
if sms1_sum ne 0 then volume_avg = divide(sms_num_sum, sms1_sum);
spend_avg = .;
output;
Service = "fico";
Enrolled = fico_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(fico_sum, hh_sum);
Active = fico1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(fico1_sum, enrolled);
volume_avg = 0;
if fico1_sum ne 0 then volume_avg = divide(fico_num_sum, fico1_sum);
spend_avg = .;
output;
Service = "fworks";
Enrolled = fworks_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(fworks_sum, hh_sum);
Active = fworks1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(fworks1_sum, enrolled);
volume_avg = 0;
if fworks1_sum ne 0 then volume_avg = divide(fworks_num_sum, fworks1_sum);
spend_avg = .;
output;
Service = "edeliv";
Enrolled = edeliv_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(edeliv_sum, hh_sum);
Active = edeliv1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(edeliv1_sum, enrolled);
volume_avg = 0;
if edeliv1_sum ne 0 then volume_avg = divide(edeliv_num_sum, edeliv1_sum);
spend_avg = .;
output;
Service = "estat";
Enrolled = estat_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(estat_sum, hh_sum);
Active = estat1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(estat1_sum, enrolled);
volume_avg = 0;
if estat1_sum ne 0 then volume_avg = divide(estat_num_sum, estat1_sum);
spend_avg = .;
output;
format service svcfmt.;
keep segment service enrolled: active: volume_avg spend_avg;
run;
*************************************************;
** ANALYSIS FOR TRANSACTIONS (CHK) **;
*************************************************;
data temp_tran ;
set data.main_201209;
where ptype eq 'CCS' and stype in ("REW","NOR","SIG");
where also dda = 1;
if bp_num ge 1 then bp1 = 1;
else bp1 = 0;
if VPOS_NUM ge 1 then VPOS1 = 1;
else VPOS = 0;
if MPOS_NUM ge 1 then MPOS1 = 1;
else MPOS = 0;
if ATMO_NUM ge 1 then ATMO1 = 1;
else ATMO = 0;
if ATMT_NUM ge 1 then ATMT1 = 1;
else ATMT = 0;
if BR_TR_NUM ge 1 then BR_TR1 = 1;
else BR_TR = 0;
if vru_NUM ge 1 then VRU1 = 1;
else VRU = 0;
if web_signon ge 1 then web1 = 1;
else web1 = 0;
if chk_num ge 1 then chk1 = 1;
else chk1 = 0;
*below are always enrolled;
chk = 1;
vru = 1;
br_tr = 1;
dd = 1;
*these are always zero;
dd_num = 0;
chk_amt=0;
*do we have a debit card?, if so turn atm,deb flags enrolled on;
if cqi_deb eq 1 then do;
vpos = 1;
mpos = 1;
atmt = 1;
atmo =1;
end;
if cqi_deb eq 0 then do;
vpos = 0;
mpos = 0;
atmt = 0;
atmo =0;
end;
keep segment HHID HH web web1 bp1 bp web_signon BP_NUM BP_AMT vpos: mpos: br_tr: vru: chk: dd: atmo: atmt: cqi_dd ;
rename web_signon = web_num cqi_dd=dd1;
run;
Proc tabulate data=temp_tran out=tran1 missing;
class segment ;
var HH hh vpos: mpos: chk: atmo: atmt: dd: bp: ;
table (segment ALL), (sum)*(HH vpos: mpos: chk: atmo: atmt: dd: bp: ) / nocellmerge;
run;
data tran2;
set tran1;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
run;
data tran3;
length transaction $ 25;
set tran2;
Transaction = "vpos";
Enrolled = vpos_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(vpos_sum, hh_sum);
Active = vpos1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(vpos1_sum, enrolled);
if vpos1_sum ne 0 then volume_avg = divide(vpos_num_sum, vpos1_sum);
if vpos_sum ne 0 then spend_avg = divide(vpos_amt_sum, vpos_sum);
output;
Transaction = "mpos";
Enrolled = mpos_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(mpos_sum, hh_sum);
Active = mpos1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(mpos1_sum, enrolled);
if mpos1_sum ne 0 then volume_avg = divide(mpos_num_sum, mpos1_sum);
if mpos_sum ne 0 then spend_avg = divide(mpos_amt_sum, mpos_sum);
output;
Transaction = "atmo";
Enrolled = atmo_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(atmo_sum, hh_sum);
Active = atmo1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(atmo1_sum, enrolled);
if atmo1_sum ne 0 then volume_avg = divide(atmo_num_sum, atmo1_sum);
if atmo_sum ne 0 then spend_avg = divide(atmo_amt_sum, atmo_sum);
output;
Transaction = "atmt";
Enrolled = atmt_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(atmt_sum, hh_sum);
Active = atmt1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(atmt1_sum, enrolled);
if atmt1_sum ne 0 then volume_avg = divide(atmt_num_sum, atmt1_sum);
if atmt_sum ne 0 then spend_avg = divide(atmt_amt_sum, atmt_sum);
output;
Transaction = "bp";
Enrolled = bp_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(bp_sum, hh_sum);
Active = bp1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(bp1_sum, enrolled);
if bp1_sum ne 0 then volume_avg = divide(bp_num_sum, bp1_sum);
if bp_sum ne 0 then spend_avg = divide(bp_amt_sum, bp_sum);
output;
Transaction = "chk";
Enrolled = chk_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(chk_sum, hh_sum);
Active = chk1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(chk1_sum, enrolled);
if chk1_sum ne 0 then volume_avg = divide(chk_num_sum, chk1_sum);
spend_avg = .;
output;
Transaction = "dd";
Enrolled = dd_sum;
Enrolled_pct = 0;
if hh_sum ne 0 then Enrolled_pct = divide(dd_sum, hh_sum);
Active = dd1_sum;
Active_pct = 0;
if enrolled ne 0 then Active_pct = divide(dd1_sum, enrolled);
volume_avg = 0;
if dd_sum ne 0 then spend_avg = divide(dd_amt_sum, dd_sum);
output;
format transaction $tranfmt.;
keep segment Transaction Enrolled: active: volume_avg spend_avg;
run;
******************************************;
** CLV and IXI Analysis **;
******************************************;
data temp_clv ;
set data.main_201209;
where ptype eq 'CCS' and stype in ("REW","NOR","SIG");
keep segment HHID HH clv: ixi: ;
run;
proc tabulate data=temp_clv out=clv1;
where clv_total ne . and clv_steady eq '1' and clv_flag eq 'Y' ;
class segment ;
var HH clv_total clv_rem clv_rem_ten;
table (segment ALL), N (clv_total clv_rem clv_rem_ten)*mean;
run;
data clv2;
set clv1;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
run;
proc tabulate data=temp_clv out=clv3 ;
where clv_total ne .;
class segment clv_total;
var HH ;
table (segment ALL) ,(clv_total ALL)*(hh)*(sum rowpctsum<hh>) ;
format clv_total clvband.;
run;
data clv4;
set clv3;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
HHs = hh_sum;
percent_hhs = sum (of hh_pctsum:);
format segment segfmt.;
keep segment clv_total HHs percent_hhs;
run;
proc tabulate data=temp_clv out=ixi1;
where ixi_tot ne .;
class segment ;
var HH ixi: ;
table (segment ALL), N (ixi:)*mean;
run;
data ixi2;
set ixi1;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
format segment segfmt.;
run;
proc tabulate data=temp_clv out=ixi3 ;
where ixi_tot ne .;
class segment IXI_tot;
var HH ;
table (segment ALL) ,(ixi_tot ALL)*(hh)*(sum rowpctsum<hh>) ;
format ixi_tot wealthband.;
run;
data ixi4;
set ixi3;
if substr(_type_,1,1) eq 0 then do;
segment = -1;
end;
HHs = hh_sum;
percent_hhs = sum (of hh_pctsum:);
format segment segfmt.;
keep segment ixi_tot HHs percent_hhs;
run;
ods html;
